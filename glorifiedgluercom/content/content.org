#+TITLE: ~glorifiedgluer
#+AUTHOR: ~glorifiedgluer

#+HUGO_BASE_DIR: ../

* Pages
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:END:
** About
:PROPERTIES:
:EXPORT_TITLE: About
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :description About this site and me.
:END:
*** About me
I'm *Victor Freire*, a student and software developer based in *Guarulhos,
Brazil*, currently working at [[https://divisionsmg.com][Divisions Maintenance Group]] as a
software engineer writing [[https://fsharp.org/][F#]] and [[https://nixos.org][Nix]].

I've taught myself coding, cloud computing and linux for years, out of passion.
At the moment I'm mostly interested in learning about highly scalable systems.

My projects live at [[https://git.sr.ht/~glorifiedgluer][sourcehut]] and [[https://github.com/ratsclub][GitHub]], you can also contact me via [[mailto:victor@freire.dev.br][email]] or
[[https://matrix.to/#/@stoicallyincorrect:mdzk.app][matrix]].

*** About this site

**** Why?
This site was built for the only reason of sharing and documenting most of my
interests.

**** How?
I intend to only use [[https://www.gnu.org/philosophy/floss-and-foss.html][FOSS]] while producing its content.

- Icon made by my beloved nana
- Generated using [[https://hugo.io][Hugo]], theme inspired by [[https://harelang.org][The Hare programming language website]]
- Source code at [[https://git.sr.ht/~glorifiedgluer/monorepo/tree/main/item/glorifiedgluercom][sourcehut]]
- Built with [[https://nixos.org][Nix]] and [[https://builds.sr.ht/~glorifiedgluer/monorepo][builds.sr.ht]]
- Hosted at [[https://srht.site/][pages.sr.ht]]

** Blogroll
:PROPERTIES:
:EXPORT_TITLE: Blogroll
:EXPORT_FILE_NAME: blogroll
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :description A rendered version of my OPML file. :layout blogroll
:END:
This page is a rendered version of my [[https://en.wikipedia.org/wiki/OPML][OPML]] file.

** Home
:PROPERTIES:
:EXPORT_TITLE: ~glorifiedgluer
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_TYPE: homepage
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :description ~glorifiedgluer's personal website.
:END:
This page is empty because I didn't find anything interesting to put here yet.

Feel free to check out the navigation links above.

* Blog :@blog:
:PROPERTIES:
:EXPORT_HUGO_SECTION: blog
:END:
** Index
:PROPERTIES:
:EXPORT_TITLE: ~glorifiedgluer blog
:EXPORT_FILE_NAME: _index
:EXPORT_DATE: 1970-01-01
:END:
#+begin_description
Scattered thoughts, ideas and experiences.
#+end_description
** This will deteriorate quickly
:PROPERTIES:
:EXPORT_FILE_NAME: this-will-deteriorate-quickly
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug this-will-deteriorate-quickly
:EXPORT_DATE: 2020-03-01
:END:
#+begin_description
Thoughts about the current state of the web, content consuming and its longevity.
#+end_description

In my teenager years I was a member of my school's student council. Part of our
job was to propose changes to our current infrastructure, organize study groups
and plan social projects. We were a bunch of youngsters without much experience
-- or no experience at all -- in the education field, therefore we resorted to
know from those who had it over the Internet. At the time there wasn't a lot of
content about it on social media, the majority was writing at Blogspot (now
[[https://blogger.com][Blogger]]) or forums.

Here comes [[https://pt.wikipedia.org/wiki/RSS][RSS]]. Blogspot offered a *RSS Feed* by default so it was rather simple
to follow dozens of blogs. Every member of the council used a RSS reader they
liked the most and it worked great.

Years passed and I found the list of blogs I used to read at that time. While
diving through the links I found out most of them didn't receive an update since
my highschool (or have just disappeared). However, they always had a link to the
author's social media (Twitter, Facebook or LinkedIn) and you could see those
profiles were being updated regularly. A lot of the educators continued to write
posts about their field of interest, but now on social media.

In the meantime, I observed a pattern between profiles. They tended to reference
their old posts from the Blogger platform instead of publishing them again on
the new platform. Why so? You could see some of them tried to do that but
formatting was awkward as Facebook doesn't provide the same tools Blogger
offered and Twitter's posts are too short. So I feel they just couldn't retrieve
their posts and they were long gone from their hands.

So how would an individual escape this madness? It's quite simple, a blog post
is nothing but static content. Text, images videos and audios. Use this in your
favor. Write text on known formats such as Markdown[fn:1], [[https://pt.wikipedia.org/wiki/ReStructuredText][ReStructuredText]] or
even plain-text. Store all files in a [[https://git-scm.com][Git]] repository, external hard drive,
Dropbox... whatever. Just stick to the simplest file formats and reliable
storage. Services like [[https://medium.com][Medium]], [[https://substack.com][Substack]] and [[https://tumblr.com][Tumblr]] can die and take all your
posts with them at any time.

At the moment I'm using [[https://neovim.io][Neovim]] to edit my blog posts in Markdown and hosting
them in [[https://mataroa.blog][mataroa]][fn:2]. Alternatives are: [[https://gohugo.io][Hugo]], [[https://getzola.org][Zola]] and more. All you need to setup a
web site is one of these programs, a bunch of Markdown files and a web server.
You'll also find a lot of places to host your content for free such as [[https://gitlab.com][GitLab]],
[[https://github.com][GitHub]] or [[https://netlify.com][Netlify]].

Although this approach brings some advantages, it has some shortcomings too. In
a static website you won't have a comments section without a third-party
service; basic tech knowledge is needed to know where to put files in your web
server provider of choice and if you want a custom domain such as this one
you'll have to do some configuration. A quick YouTube tutorial might be
sufficient to teach you how to do all of the above in minutes.

** Burning out and finding out
:PROPERTIES:
:EXPORT_FILE_NAME: burning-out-and-finding-out
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug burning-out-and-finding-out
:EXPORT_DATE: 2021-08-31
:END:
#+begin_description
On being burnout for the first time.
#+end_description

At the time of this writing I'm burned out. I had no doubt it was a thing and
that it could happen to anyone. However, I couldn't see myself suffering from
this. At least not so soon.

#+begin_quote
Burnout is caused when you repeatedly make large amounts of sacrifice and or
effort into high-risk problems that fail. It's the result of a negative
prediction error in the nucleus accumbens. You effectively condition your brain
to associate work with failure. -- [[https://news.ycombinator.com/item?id=5630618][Source]]
#+end_quote

I've been pretty active for the past 4 to 5 years due to college, courses, work
and other activities. Yet all of this haven't bothered me in the slightest,
until now. I couldn't take control of basic chores, missed the point of meetings
after a few moments, had no will to leave the bed and many other things.
Moreover, It's a strange feeling with predefined steps:

1. You know what you have to do;
2. You know it's within your capabilities;
3. You get excited to do the task;
4. Your body just /will not do it/.

There you go, you now have the recipe to fight against yourself for a whole day.
This will be a excruciating battle until you hit the bed and repeat it the next
morning. That is, if you aren't already going to sleep late due to forcing
yourself to be productive throughout the day. Realizing I was battling my own
was really important to improve my situation. I started by cleaning my room,
then exercising, putting a alarm to tell me when to eat and so on. My next step
was to change my whole environment by looking after a new job.

Currently I'm not in position to take a sabbatical period of time to discover
new hobbies or a new career - and I don't want to, as I love my current
profession. So, what's left to ponder to change this situation, I may ask
myself? To be honest, I have no clue. While I'm in the process to land a new job
I feel that this might be the response I needed to this feeling. New challenges,
new people, new technologies and new everything.

** write: broken pipe
:PROPERTIES:
:EXPORT_FILE_NAME: write-broken-pipe
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug write-broken-pipe
:EXPORT_DATE: 2022-04-06
:END:
#+begin_description
The adventure of figuring out the "tcp: write: broken pipe" error.
#+end_description

*tl;dr*: [[https://docs.konghq.com/kubernetes-ingress-controller/][Kong Ingress Controller]] was the culprit. Its timeout setting was
closing the connection before the file could be sent. /If you're facing this
issue in a long-lasting request, check your reverse proxy configuration, as it
may have a different configuration than your application./ ;-)

At Grupo SBF we have an HTTP server written in [[https://go.dev/][Go]] that queries [[https://cloud.google.com/bigquery][BigQuery]] and
returns the result as a *big* csv file. However, after some time we sent a
request and instead of a file, we received this error message:

#+begin_src
write tcp 10.0.0.1:8080->10.0.0.2:38302: write: broken pipe
#+end_src

Well, this is quite a surprise as we haven't seen this error message before...
After all, what does it even mean? A quick Google search returned this:

#+begin_quote
A condition in programming (also known in POSIX as EPIPE error code and SIGPIPE
signal), when a process requests an output to pipe or socket, which was closed
by peer. -- [[https://en.wikipedia.org/wiki/Broken_pipe][Wikipedia]]
#+end_quote

Hmm, this /definitely/ shed some light on the problem. Considering that the HTTP
server is provided by the powerful [[https://pkg.go.dev/net/http][net/http]] package in Go's standard library, we
might have some obvious places to check out.

Cloudflare has a [[https://blog.cloudflare.com/exposing-go-on-the-internet/][great article]] talking about the default configuration on Go's
HTTP server and how to avoid making mistakes with them. We jumped straight to
the article's timeout section and checked if we didn't forget to configure them.

#+begin_src go
srv := &http.Server{
    ReadTimeout:  10 * time.Minute, // 10 minutes
    WriteTimeout: 10 * time.Minute,
    Addr:         ":8080",
    Handler:      r,
}
#+end_src

For context, our application takes about 2 minutes to send a response so this
isn't a problem for us as we have 10 minutes until a [[https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504][504 server error]] is
returned.

To our amazement, sending the request to a local server returned no error
whatsoever. Comparing our local environment with production we also noticed that
our request was /dropped/ at exactly 1 minute of execution in production.
Therefore it must be something between our client and server!

Knowing that we deploy to a Kubernetes cluster with a [[https://docs.konghq.com/kubernetes-ingress-controller/][Kong Ingress Controller]]
_{controlling} taking care of our reverse proxy, we checked its documentation
and... Bingo! This is the root of our problem, as per the [[https://docs.konghq.com/gateway/1.1.x/reference/proxy/#3-proxying-and-upstream-timeouts][Kong Ingress
Controller Documentation]] the default timeout is =60_000= milliseconds -- in
other words, 1 minute!

*** Replicating the behavior
   :PROPERTIES:
   :CUSTOM_ID: replicating-the-behavior
   :END:
Before trying something on our servers, why don't we replicate this behavior
locally? For this purpose we can run a =nginx= container and a simple Go HTTP
server with a similar functionality of our service.

The idea behind the test is to setup an endpoint that takes a lot of time
writing on the buffer while our reverse proxy has a timeout of only 2 seconds.

**** Go server and Dockerfile
    :PROPERTIES:
    :CUSTOM_ID: go-server-and-dockerfile
    :END:
#+begin_src go
func main() {
    mux := http.NewServeMux()
    mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        time.Sleep(time.Second * 10)

        // creating a large data size
        // that will take a long time to be written
        size := 900 * 1000 * 1000
        tpl := make([]byte, size)
        t, err := template.New("page").Parse(string(tpl))
        if err != nil {
            log.Printf("error parsing template: %s", err)
            return
        }

        if err := t.Execute(w, nil); err != nil {
            log.Printf("error writing: %s", err)
            return
        }
    })

    srv := &http.Server{
        ReadTimeout: 10 * time.Minute,
        WriteTimeout: 10 * time.Minute,
        Addr: ":8080",
        Handler: mux,
    }

    log.Println("server is running!")
    log.Println(srv.ListenAndServe())
}
#+end_src

And then the Dockerfile:

#+begin_src Dockerfile
# server.Dockerfile
FROM golang:alpine AS build
RUN apk --no-cache add gcc g++ make git
WORKDIR /go/src/app
COPY . .
RUN go mod init server
RUN go mod tidy
RUN GOOS=linux go build -ldflags="-s -w" -o ./bin/web-app ./server.go

FROM alpine:3.13
RUN apk --no-cache add ca-certificates
WORKDIR /usr/bin
COPY --from=build /go/src/app/bin /go/bin
EXPOSE 8080
ENTRYPOINT /go/bin/web-app --port 8080
#+end_src

**** nginx configuration and Dockerfile
    :PROPERTIES:
    :CUSTOM_ID: nginx-configuration-and-dockerfile
    :END:
#+begin_src conf
# nginx.conf
events {
    worker_connections 1024;
}

http {
  server_tokens off;
  server {
    listen 80;

    location / {
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header Host            $http_host;

      # timeout set to 2 seconds
      proxy_read_timeout 2s;
      proxy_connect_timeout 2s;
      proxy_send_timeout 2s;

      proxy_pass http://goservice:8080/;
    }
  }
}
#+end_src

And then the Dockerfile:

#+begin_src Dockerfile
# nginx.Dockerfile
FROM nginx:latest
EXPOSE 80
COPY nginx.conf /etc/nginx/nginx.conf
#+end_src

**** Docker Compose
    :PROPERTIES:
    :CUSTOM_ID: docker-compose
    :END:
The last piece missing is a [[https://docs.docker.com/compose/][Docker
Compose]] file to help us run these containers:

#+begin_src yaml
# docker-compose.yaml
version: "3.6"
services:
  goservice:
    build: "server.Dockerfile"
    ports:
      - "8080"
  nginx:
    build: "nginx.Dockerfile"
    ports:
      - "80:80"
    depends_on:
      - "goservice"
#+end_src

**** Running and testing
    :PROPERTIES:
    :CUSTOM_ID: running-and-testing
    :END:
After setting up our environment we can test it by running the commands below:

- =docker-compose up --build= to run our containers
- =curl localhost= to make a request to our server

Voilá! The error shows up confirming our theory!

#+begin_src
goservice_1  | 2022/04/07 01:12:14 error writing: write tcp 172.18.0.2:8080->172.18.0.3:56768: write: broken pipe
#+end_src

*** Conclusion
  :PROPERTIES:
  :CUSTOM_ID: conclusion
  :END:
This was a lot of fun to figure it! As noted by our tests the timeout
configuration of our cluster's reverse proxy was indeed the issue, overriding
the timeout settings with the snippet below solved the issue instantly!

#+begin_src yaml
apiVersion: configuration.konghq.com/v1
kind: KongIngress
metadata:
  annotations:
    kubernetes.io/ingress.class: "kong"
  name: kong-timeout-conf
proxy:
  connect_timeout: 10000000 # 10 minutes
  protocol: http
  read_timeout: 10000000
  retries: 10
  write_timeout: 10000000
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    konghq.com/override: kong-timeout-conf
#+end_src

** Notes on builds.sr.ht
:PROPERTIES:
:EXPORT_DATE: 2022-04-29
:EXPORT_FILE_NAME: notes-on-buildssrht
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug notes-on-buildssrht
:END:
#+begin_description
I quite like builds.sr.ht and want to share some of the reasons.
#+end_description

For the past few months I've been using [[https://sr.ht][sourcehut]]'s platform to work on software
an it has been quite an interesting experience. Nonetheless, one of the services
I really enjoy using is the their build service called [[https://builds.sr.ht][builds.sr.ht]].

#+begin_quote
builds.sr.ht is a service on sr.ht that allows you to submit "build manifests"
for us to work on. -- [[https://man.sr.ht/builds.sr.ht/][man.sr.ht]]
#+end_quote

The thing I don't like on [[https://github.com/features/actions][GitHub Actions]] is that it is kind of /magical/. For
example, you don't actually know what it is doing when you define that an
=action= should only run when a specific path is modified. Not to even mention
their [[https://docs.github.com/pt/actions/creating-actions][custom actions]] which usually takes a non-trivial amount of
TypeScript/JavaScript.

Contrary to this, [[https://builds.sr.ht][builds.sr.ht]] is /really/ explicit on its [[https://man.sr.ht/builds.sr.ht/manifest.md][build manifest]].
You're basically expected to write plain shell scripts for your builds.

*** Reducing resource usage
   :PROPERTIES:
   :CUSTOM_ID: reducing-resource-usage
   :END:
As I said previously, there's no special syntax to work on specific paths,
branches, pull requests and such. By default your task will run on every commit
you push. In order to reduce our CI usage we can restrain our tasks to run on
specific scenarios:

**** On path change
    :PROPERTIES:
    :CUSTOM_ID: on-path-change
    :END:
#+begin_src sh
if ! $(git diff --quiet HEAD HEAD^ -- "<your-path>")
then
  # do something
fi
#+end_src

**** On branch change
    :PROPERTIES:
    :CUSTOM_ID: on-branch-change
    :END:
This tip was taken from [[https://todo.sr.ht/~sircmpwn/builds.sr.ht/170][issue #170]].

#+begin_example
tasks:
- check-branch: |
   cd repo_name
   if [ "$(git rev-parse your-branch)" != "$(git rev-parse HEAD)" ]; then \
      complete-build; \
   fi
#+end_example

*** NixOS on builds.sr.ht
   :PROPERTIES:
   :CUSTOM_ID: nixos-on-builds.sr.ht
   :END:
As I don't like to write shell scripts I use Nix and this is my favorite feature
of this service. builds.sr.ht supports [[https://nixos.org][NixOS]] by default[fn:3]. This means that
we can leverage Nix Flakes for truly declarative and reproducible builds there!
Let's consider a small example using [[https://go.dev][Go]] to show you how easy it really is. A
small =flake.nix= containing the following content should suffice our needs:

#+begin_example
{
  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = { self, nixpkgs, ... }:
    let pkgs = import nixpkgs { system = "x86_64-linux"; };
    in
    {
      devShells."x86_64-linux".ci = with pkgs; mkShell {
        buildInputs = [ go golangci-lint ];
      };
    };
}
#+end_example

This definition is capable of giving us a shell containing Go and [[https://github.com/golangci/golangci-lint][golangci-lint]]
on =$PATH=.

Now let's write the build manifest for our CI:

#+begin_example
image: nixos/unstable
packages:
- nixos.nixUnstable
environment:
  NIX_CONFIG: "experimental-features = nix-command flakes"
tasks:
  - lint: |
      cd source
      nix develop .#ci -c golangci-lint run
  - test: |
      cd source
      nix develop .#ci -c go test ./...
  - build: |
      cd source
      nix develop .#ci -c go build
#+end_example

And that's it! We have our CI up and running with the guarantee of having our
tools being the same on every run. No sudden updates or unexpected behavior.

** Running a Raspberry Pi 4 with NixOS
:PROPERTIES:
:EXPORT_DATE: 2022-05-09
:EXPORT_FILE_NAME: running-a-raspberry-pi-4-with-nixos
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug running-a-raspberry-pi-4-with-nixos
:END:
#+begin_description
Configuring and running NixOS on a Raspberry Pi 4.
#+end_description

For quite some time I've been wanting to run a small homelab with [[https://nixos.org][NixOS]]. I don't
host much services myself, however I feel that I can have a lot of fun (and
learn /a bit/) by maintaining my own server. All the services I run on the
Cloud™ (Matrix Dendrite and a Nix Binary Cache) could be running on a Raspberry
Pi inside my drawer. So that be it!

#+caption: A picture of Raspberry Pi inside an Argon One case and a Keychron K2V2 behind
[[/img/raspberry-argon.jpg]]

*** Setup
   :PROPERTIES:
   :CUSTOM_ID: setup
   :END:
At the time of writing my setup looks like this:

- Case Argon ONE M.2
- KingSpec SSD M.2 SATA - 512GB
- Random Flash Drive - 8GB (you can also use a SD Card)
- Raspberry Pi 4 - 8GB

*** Flashing
   :PROPERTIES:
   :CUSTOM_ID: flashing
   :END:
Download the NixOS =aarch64= image. Personally I went with the [[https://hydra.nixos.org/job/nixos/trunk-combined/nixos.sd_image_new_kernel.aarch64-linux][unstable branch]]
as I like to live dangerously but you can choose [[https://nixos.wiki/wiki/NixOS_on_ARM#SD_card_images_.28SBCs_and_similar_platforms.29][other versions]] if you want to.
After that you just need to =dd= it to your flash drive and boot it:

#+begin_src shell
$ sudo dd if=nixos.img of=/dev/sdX bs=4096 conv=fsync status=progress
#+end_src

*Notes*:
- Don't forget to extract the image before flashing it.
- If using the Argon One M.2 case, don't boot the USB Drive with your SSD connected. Otherwise your raspberry will try to boot from the SSD and not your Flash Drive/SD Card.

*** Formatting
   :PROPERTIES:
   :CUSTOM_ID: formatting
   :END:
You can actually follow the [[https://nixos.org/manual/nixos/stable][NixOS Manual]] to partition your hard drive. However
I've written a script to help me do this:

#+begin_src shell
# replace /dev/sda with your SSD
export FMT_DISK=/dev/sda

wipefs -a $FMT_DISK

export DISK=/dev/disk/by-id/ata*

parted $FMT_DISK -- mklabel msdos
parted $FMT_DISK -- mkpart primary fat32 0MiB 512MiB # $DISK-part1 is /boot
parted $FMT_DISK -- mkpart primary 512MiB -4GiB # $DISK-part2 is the ext4 partition
parted $FMT_DISK -- mkpart primary linux-swap -4GiB 100% # Swap

mkfs.ext4 -L nixos $DISK-part2
mount $DISK-part2 /mnt

mkfs.vfat -F32 $DISK-part1
mkdir -p /mnt/boot
mount $DISK-part1 /mnt/boot
#+end_src

*** NixOS Configuration
   :PROPERTIES:
   :CUSTOM_ID: nixos-configuration
   :END:
In order to boot correctly, you need to define some boot options[fn:4]:

#+begin_src nix
{
  boot = {
    initrd.availableKernelModules = [ "usbhid" "usb_storage" ];
    kernelPackages = pkgs.linuxPackages_rpi4;
    kernelParams = [
      "8250.nr_uarts=1"
      "cma=128M"
      "console=tty1"
      "console=ttyAMA0,115200"
    ];

    loader = {
      raspberryPi = {
        enable = true;
        version = 4;
      };

      grub.enable = false;
      generic-extlinux-compatible.enable = true;
    };
  };

  hardware.enableRedistributableFirmware = true;
}
#+end_src

*** Boot firmware
   :PROPERTIES:
   :CUSTOM_ID: boot-firmware
   :END:
The installer disk has a partition containing the necessary firmwares to boot
(it was on =/dev/sda1/= for me). Just copy it to your boot partition.

#+begin_src shell
mkdir /firmware
mount /dev/sda1 /firmware
cp /firmware/* /mnt/boot
#+end_src

*** Installing
   :PROPERTIES:
   :CUSTOM_ID: installing
   :END:
**** With Channels
    :PROPERTIES:
    :CUSTOM_ID: with-channels
    :END:
The only step left is to install the system:

#+begin_src shell
nixos-install --root /mnt
#+end_src

**** With Flakes
    :PROPERTIES:
    :CUSTOM_ID: with-flakes
    :END:
Another way to install it is to make use of Nix [[https://nixos.wiki/wiki/Flakes][Flakes]]. This way we can ensure
that our build is completely reproducible and/or running the same software
version as the other machines.

This is a rather simple process if you already have a repo configured with your
[[https://nixos.org][NixOS]] configurations. First, I need a shell with =git= and a [[https://nixos.org][Nix]] version that
supports the experimental [[https://nixos.wiki/wiki/Flakes][Flakes]] commands.

#+begin_src shell
nix-shell -p git nixUnstable
#+end_src

After that I just clone my repository, copy the =hardware-configuration.nix=
file over and install the system.

#+begin_src shell
# clone the repository
git clone https://git.sr.ht/~glorifiedgluer/dotfiles
cd dotfiles

# copy hardware-configuration.nix
cp /mnt/etc/nixos/hardware-configuration.nix hosts/rpi4/

# install the system
nixos-install --flake .#rpi4
#+end_src
** Starting a personal monorepo
:PROPERTIES:
:EXPORT_DATE: 2022-05-11
:EXPORT_FILE_NAME: starting-a-personal-monorepo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug starting-a-personal-monorepo
:ID:       143b30fd-8d32-4e67-9e13-5bf8a47ea8e2
:END:
#+begin_description
Starting my journey with a personal monorepo managed by Nix.
#+end_description

I've been using [[https://nixos.org][Nix]] as my package manager for 4 years now and it has been the
best /computer-related/ decision I have ever made and fortunately, for the past
few years its ecosystem has been growing a lot[fn:5] [fn:6] [fn:7]. Some of this
movement is due to the advent o [[https://nixos.wiki/wiki/Flakes][Flakes]] that makes it /way/ easier to share
reproducible outputs than the previous Nix solution of channels.

Considering that I can use Nix:

- to share build artifacts (binaries, Nix modules and such);
- to manage my dependencies;
- as a build system.

I thought to myself: "Why not build a personal monorepo"? I mean, this might
sound like a weird conclusion to take from all of this but I can explain! I
swear!

*** Rationale
  :PROPERTIES:
  :CUSTOM_ID: rationale
  :END:
Sometimes I just get bored setting up a new project. Create a new repository,
setup the dependencies, write a CI manifest... it's too tiresome! I won't even
mention the pain in the ass that is to write multiple projects on the multiple
machines. The clone, fetch, pull and push dance is just too much when I could be
coding already.

Most of my personal projects are written in [[https://go.dev][Go]], a really boring language that
takes its time to include new features and release new versions. This means that
an update won't break them and that I can take advantage of a way to share the
same compiler and tooling version through my projects.

If you're a Nix user, a single command would show you all the outputs available
for use: =nix flake show sourcehut:~glorifiedgluer/monorepo=. This also means
that you can import this repo as an input on your =flake.nix= file and use any
of my projects as you please.

The CI can be simplified to a simple shell conditional:

#+begin_src yaml
tasks:
  - someproject: |
      cd monorepo
      if ! $(git diff --quiet HEAD HEAD^ -- "someproject")
      then
        # do something if the project got an update
      fi
#+end_src

Nonetheless, the best reason to try this is out is to have some fun and explore
new challenges with version control and build systems! ;-)

*** Expectation
  :PROPERTIES:
  :CUSTOM_ID: expectation
  :END:
I mean... none? lol. Being serious now, I don't expect my projects to become
something used by hundreds or thousands of users as most of them are done out of
passion/need. So the rationale above is composed of things that personally took
out part of the joy of bulding out something and seeing it run.

Is this going to work? I have no idea as I don't have much experience with
monorepos. I'm not really sure if this is going to scale or bore me in other
ways. The only certainty I have is that I'm having fun doing it /right now/!

You can see the repository on the links below:

- [[https://github.com/ratsclub/monorepo][GitHub]]
- [[https://git.sr.ht/~glorifiedgluer/monorepo/][sourcehut]]

** Git mirroring, systemd and NixOS
:PROPERTIES:
:EXPORT_DATE: 2022-06-14
:EXPORT_FILE_NAME: git-mirroring-systemd-nixos
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug git-mirroring-systemd-nixos
:END:
#+begin_description
Configuring a Git mirror with systemd services and timers on NixOS.
#+end_description

For the past few years I have been collecting contributions to multiple projects
on multiple platforms such as GitHub, GitLab, self-hosted Gitea instances and so
on. It's rather boring to go to a website and see the source code there... Then
I thought to myself: "Why not write about a made up need I don't have just to
learn something new?".

So, the idea here was to mirror those repositories into my [[https://sourcehut.org][sourcehut]] account
(although this should work for any remote repository). For this we will use a
[[https://nixos.org][NixOS]] system and [[https://www.freedesktop.org/software/systemd/man/systemd.timer.html][systemd timers]]. The idea is dead simple, we clone the
repositories and push them to our desired remote.

*** Configuring the repository
   :PROPERTIES:
   :CUSTOM_ID: configuring-the-repository
   :END:
This step is pretty easy and can be done in two steps:

1. Clone the repository

#+begin_src sh
$ git clone --mirror https://git.com/repo
#+end_src

2. Configure the remote as to ensure that we will only push to the
   desired remote.

#+begin_src sh
$ cd repo
$ git remote set-url --push origin https://remote.com/repo-mirror
#+end_src

*** systemd to the rescue
   :PROPERTIES:
   :CUSTOM_ID: systemd-to-the-rescue
   :END:
We have our repository but we are still missing an important step that is to
keep pushing new changes to our mirror.

[[https://nixos.org][NixOS]] has a pretty good declarative way of declaring systemd services and timers
that we can take advantage of here. The idea is to have a script being ran in
our diretory through a systemd /service/ that will be invoked by a systemd
/timer/ hourly.

**** The script
    :PROPERTIES:
    :CUSTOM_ID: the-script
    :END:
There's nothing novel here. This script will iterate over the directories inside
the =WorkingDirectory=, fetch updates and then push it to our mirror.

#+begin_src nix
let
  gitmirrorScript = pkgs.writeShellScriptBin "gitmirror" ''
    for d in */ ; do
      git -C "$d" fetch -p origin
      git -C "$d" push --mirror
    done
  '';
in
#+end_src

**** The service and timer
    :PROPERTIES:
    :CUSTOM_ID: the-service-and-timer
    :END:
The service is rather simple too, we pass our repository's directory through the
=WorkingDirectory= value and set the =gitmirror= service as the unit to be
invoked by our timer. Note, however, that we added =git= /and/ =openssh= to the
path. Your root user should be able to authenticate on boths repos with its ssh
key.

#+begin_src nix
{
  systemd.services.gitmirror = {
    enable = true;
    description = "Git mirror service";
    after = [ "network.target" ];
    path = with pkgs; [ git openssh ];
    serviceConfig = {
      Type="oneshot";
      WorkingDirectory = "/home/glorifiedgluer/repo";
      ExecStart = "${gitmirrorScript}/bin/gitmirror";
    };
    wantedBy = [ "multi-user.target" ];
  };

  systemd.timers.gitmirror = {
    description = "Git mirror timer";
    timerConfig = {
      OnCalendar = "hourly";
      Unit = "gitmirror.service";
    };
    wantedBy = [ "timers.target" ];
  };
}
#+end_src

** Moving this website to a single Org Mode file
:PROPERTIES:
:EXPORT_DATE: 2022-07-11
:EXPORT_FILE_NAME: moving-site-org-mode
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug moving-site-org-mode
:END:
#+begin_description
This website is now contained in a single Org Mode file.
#+end_description

I have always loved [[https://www.gnu.org/software/emacs/][GNU Emacs]] and its integrated computing environment. It has
been even better after I started using [[https://github.com/doomemacs/doomemacs][Doom Emacs]][fn:8], it basically took care of
things I was unable to do properly: make it fast and semantically coherent.
Either for the lack of time or technical knowledge.

As most GNU Emacs users, I love [[https://orgmode.org/][Org Mode]] and I love to write for this blog. So
why not join these two things together? [[https://ox-hugo.scripter.co/][ox-hugo]] let's me write a /org/ file and
turn it into multiple /hugo-compatible/ markdown files. This is quite a feature
for me as I like to keep all my /stuff/ into one place[fn:9].

It would be pretty cool to have a place to share small trips with pictures and
some comments. Thinking about it a bit more, it might work like some sort of
microblog but... different? I should start doing it and stop ovethinking. It
would be pretty cool to read a huge file with years of history written on it!

Oh, and you can see the file I'm talking about right here:
[[https://git.sr.ht/~glorifiedgluer/monorepo/blob/main/glorifiedgluercom/content/content.org][sourcehut:~glorifiedgluer/monorepo/glorifiedgluercom/content/content.org]].

* Footnotes

[fn:1] https://commonmark.org/

[fn:2] This post did indeed deteriorate quickly as 2 years later I'm writing this blog on [[https://www.gnu.org/software/emacs/][GNU Emacs]] with [[https://orgmode.org/][Org Mode]] + [[https://ox-hugo.scripter.co/][ox-hugo]] and hosting it on [[https://srht.site/][sourcehut pages]].

[fn:3] https://nixos.org

[fn:4] https://nixos.wiki/wiki/NixOS_on_ARM/Raspberry_Pi_4#Configuration

[fn:5] https://blog.replit.com/nix

[fn:6] https://shopify.engineering/what-is-nix

[fn:7] https://hercules-ci.com/

[fn:8] For the past few weeks it has been even better with the work of
[[https://github.com/thiagokokada][github:thiagokokada]] on the [[https://github.com/nix-community/nix-doom-emacs/][github:nix-community/nix-doom-emacs]] repository.
Really, kudos for taking care of this project! 🎉

[fn:9] [[id:143b30fd-8d32-4e67-9e13-5bf8a47ea8e2][Starting a personal monorepo]]
